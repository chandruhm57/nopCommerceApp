{"name": "test_addCustomer", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=103.0.5060.114)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x0110D953+2414931]\n\tOrdinal0 [0x0109F5E1+1963489]\n\tOrdinal0 [0x00F8C580+836992]\n\tOrdinal0 [0x00FBA4F3+1025267]\n\tOrdinal0 [0x00FB0293+983699]\n\tOrdinal0 [0x00FD449C+1131676]\n\tOrdinal0 [0x00FAFC74+982132]\n\tOrdinal0 [0x00FD46B4+1132212]\n\tOrdinal0 [0x00FE4812+1198098]\n\tOrdinal0 [0x00FD42B6+1131190]\n\tOrdinal0 [0x00FAE860+976992]\n\tOrdinal0 [0x00FAF756+980822]\n\tGetHandleVerifier [0x0137CC62+2510274]\n\tGetHandleVerifier [0x0136F760+2455744]\n\tGetHandleVerifier [0x0119EABA+551962]\n\tGetHandleVerifier [0x0119D916+547446]\n\tOrdinal0 [0x010A5F3B+1990459]\n\tOrdinal0 [0x010AA898+2009240]\n\tOrdinal0 [0x010AA985+2009477]\n\tOrdinal0 [0x010B3AD1+2046673]\n\tBaseThreadInitThunk [0x77BFFA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77D47A7E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77D47A4E+238]", "trace": "self = <testCases.test_addCustomer.Test_003_AddCustomer object at 0x00000244C7F8FC40>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b859d89e5595d3c4db78f3c56edff555\")>\n\n    @pytest.mark.sanity\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_addCustomer(self,setup):\n        self.logger.info(\"********** Test_003_AddCustomer ************\")\n        self.driver=setup\n        self.driver.get(self.baseURL)\n        self.driver.maximize_window()\n    \n        self.lp=LoginPage(self.driver)\n        self.lp.setUsername(self.useremail)\n        self.lp.setPassword(self.password)\n        self.lp.clicklogin()\n        self.logger.info(\"********** Login successful **************\")\n        self.logger.info(\"********** Starting AddCustomer Test *************\")\n    \n        self.addcust=AddCustomers(self.driver)\n>       self.addcust.clickCustomerModule()\n\ntestCases\\test_addCustomer.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\AddCustomersPage.py:36: in clickCustomerModule\n    self.driver.find_element(By.XPATH,self.lnkcustomer_customer_xpath).click()\nC:\\Users\\userw\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\userw\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\userw\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000244C8F15220>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77D47A7E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77D47A4E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=103.0.5060.114)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x0110D953+2414931]\nE       \tOrdinal0 [0x0109F5E1+1963489]\nE       \tOrdinal0 [0x00F8C580+836992]\nE       \tOrdinal0 [0x00FBA4F3+1025267]\nE       \tOrdinal0 [0x00FB0293+983699]\nE       \tOrdinal0 [0x00FD449C+1131676]\nE       \tOrdinal0 [0x00FAFC74+982132]\nE       \tOrdinal0 [0x00FD46B4+1132212]\nE       \tOrdinal0 [0x00FE4812+1198098]\nE       \tOrdinal0 [0x00FD42B6+1131190]\nE       \tOrdinal0 [0x00FAE860+976992]\nE       \tOrdinal0 [0x00FAF756+980822]\nE       \tGetHandleVerifier [0x0137CC62+2510274]\nE       \tGetHandleVerifier [0x0136F760+2455744]\nE       \tGetHandleVerifier [0x0119EABA+551962]\nE       \tGetHandleVerifier [0x0119D916+547446]\nE       \tOrdinal0 [0x010A5F3B+1990459]\nE       \tOrdinal0 [0x010AA898+2009240]\nE       \tOrdinal0 [0x010AA985+2009477]\nE       \tOrdinal0 [0x010B3AD1+2046673]\nE       \tBaseThreadInitThunk [0x77BFFA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77D47A7E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77D47A4E+238]\n\nC:\\Users\\userw\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "b50ded52-f417-490d-a000-53ffde5195e2-attachment.txt", "type": "text/plain"}], "start": 1658228603690, "stop": 1658228615010, "uuid": "d20a22be-48cd-40f4-9223-79dff0a2eaad", "historyId": "17a4fd872a4be54829dee19fad360582", "testCaseId": "ecf45be1296c99ca6a140b8b62c18912", "fullName": "test_addCustomer.Test_003_AddCustomer#test_addCustomer", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "sanity"}, {"name": "suite", "value": "test_addCustomer"}, {"name": "subSuite", "value": "Test_003_AddCustomer"}, {"name": "host", "value": "DESKTOP-CL30DRC"}, {"name": "thread", "value": "7860-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_addCustomer"}]}